const { OpenAI } = require('openai');
const fs = require('fs');
const { downloadFile, isLikelyOrder, normalizeTextWithFuzzyMatch, normalizeFromTo} = require('../utils/utils');
const {ports, cities} = require('../constants')
const {connectTo1C} = require('./data1C.service');

// Initialize OpenAI client
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const text_model = 'gpt-3.5-turbo'; // gpt-4-turbo
const audio_model = 'whisper-1';



function getPromptOld(text) {
    const portList = ports.map(port => `"${port.text}"`).join(', ');
    const cityList = cities.map(city => `"${city.text}"`).join(', ');


    const prompt = `
–¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –≤–∞–Ω—Ç–∞–∂—É —Ç–∞ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –∑ –Ω—å–æ–≥–æ –∫–ª—é—á–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞—Ä—à—Ä—É—Ç —ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞–Ω—Ç–∞–∂—É.

üîç –í–∞–∂–ª–∏–≤–æ:

- –ú–∞—î—à **–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏**, —á–∏ –ø–æ—Ä—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–ø–æ–ª–µ "from") **—î –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –ø–æ—Ä—Ç—ñ–≤**: [${portList}]
- –Ø–∫—â–æ –ø–æ—Ä—Ç ("from") –Ω–µ –≤—Ö–æ–¥–∏—Ç—å —É —Ü–µ–π —Å–ø–∏—Å–æ–∫ ‚Äî **–≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏** –ª–∏—à–µ: 'null'
- –¢–µ —Å–∞–º–µ –∑ –º—ñ—Å—Ç–æ–º –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–ø–æ–ª–µ "to"): —è–∫—â–æ –π–æ–≥–æ –Ω–µ –º–∞—î –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –º—ñ—Å—Ç**: [${cityList}] ‚Äî **–≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –ø–æ–ª—ñ "value" –º–∞—î –±—É—Ç–∏**: null, –∞ —É –ø–æ–ª—ñ "confidence": false
üì¶ –ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ –≤–∞–ª—ñ–¥–Ω–∏–π JSON —É —Ü—å–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:

{
    "from": {
        "value": "–ù–∞–∑–≤–∞ –ø–æ—Ä—Ç—É –£–ö–†–ê–á–ù–°–¨–ö–û–Æ –í–ò–ö–õ–Æ–ß–ù–û –ó–Ü –°–ü–ò–°–ö–£ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –ø–æ—Ä—Ç—ñ–≤ –ê–ë–û 'null'",
        "confidence": true | false
    },
    "to": {
        "value": "–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –£–ö–†–ê–á–ù–°–¨–ö–û–Æ –í–ò–ö–õ–Æ–ß–ù–û –ó–Ü –°–ü–ò–°–ö–£ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –º—ñ—Å—Ç –ê–ë–û 'null'",
        "confidence": true | false
    },
    "weight": {
        "value": —á–∏—Å–ª–æ —É –∫–≥ (–±–µ–∑ –ø–æ–º–∏–ª–æ–∫) –∞–±–æ null,
        "confidence": true | false
    },
    "volume": {
        "value": —á–∏—Å–ª–æ —É –º¬≥ –∞–±–æ null,
        "confidence": true | false
    }
}

üìå –£—Ç–æ—á–Ω–µ–Ω–Ω—è:
- –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ—á—ñ—Ç–∫–µ ‚Äî —Å—Ç–∞–≤ value: null —ñ confidence: false
- –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –≤ —ñ–Ω—à–∏—Ö –æ–¥–∏–Ω–∏—Ü—è—Ö (—Ç–æ–Ω–Ω–∏, –ª—ñ—Ç—Ä–∏ —Ç–æ—â–æ) ‚Äî –ø–µ—Ä–µ–≤–µ–¥–∏ —É –∫–≥ –∞–±–æ –º¬≥
- –ù–µ –¥–æ–¥–∞–≤–∞–π –ø–æ—è—Å–Ω–µ–Ω—å. –í–∏–≤—ñ–¥ –º–∞—î –±—É—Ç–∏ **–ª–∏—à–µ JSON** –∞–±–æ 'null'
- –ù–µ –ø—Ä–∏–¥—É–º—É–π —Å–≤–æ—ó –∑–Ω–∞—á–µ–Ω–Ω—è —á–∏ –Ω–∞–∑–≤–∏!!!
- –Ø–∫—â–æ –º—ñ—Å—Ç–∞ –∞–±–æ –ø–æ—Ä—Ç—É –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö, —É –ø–æ–ª—ñ "value" **–û–ë–û–í'–Ø–ó–ö–û–í–û** –º–∞—î –±—É—Ç–∏ null
‚ùó –ù–µ –º–Ω–æ–∂ –≤–∞–≥—É –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏. –Ø–∫—â–æ –Ω–∞–ø–∏—Å–∞–Ω–æ "20 –∫—ñ–ª–æ–≥—Ä–∞–º—ñ–≤", —Ç–æ —Ü–µ 20, –∞ –Ω–µ 20000.
- –Ø–∫—â–æ –æ–¥–∏–Ω–∏—Ü—ñ —ñ–Ω—à—ñ (—Ç–æ–Ω–Ω–∏, –ª—ñ—Ç—Ä–∏) ‚Äî –ø–µ—Ä–µ–≤–µ–¥–∏ —Ç–æ—á–Ω–æ


–û—Å—å —Ç–µ–∫—Å—Ç:
"""${text}"""
`;

    return prompt;
}

function getPrompt(text) {
    console.log('=================================TEXT PROMPT==================================');
    console.log(text);
    console.log('=================================TEXT PROMPT==================================');

    const portList = ports.map(port => `"${port.text}"`).join(', ');
    const cityList = cities.map(city => `"${city.text}"`).join(', ');

    return `
–¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –≤–∞–Ω—Ç–∞–∂—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è) —Ç–∞ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –∑ –Ω—å–æ–≥–æ –∫–ª—é—á–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞—Ä—à—Ä—É—Ç —ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞–Ω—Ç–∞–∂—É.

üì¶ –ü—Ä–∞—Ü—é–π —á—ñ—Ç–∫–æ –∑–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏:

üîπ **"from"** ‚Äî –ø–æ—Ä—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
üîπ **"to"** ‚Äî –º—ñ—Å—Ç–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
üîπ **"weight"** ‚Äî –≤–∞–≥–∞ —É **–∫–≥**
üîπ **"volume"** ‚Äî –æ–± º—î–º —É **–º¬≥**

---

üîç **–ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:**

1. –£—Å—ñ –ø–æ—Ä—Ç–∏ (from) –º–∞—é—Ç—å –±—É—Ç–∏ **—Ç—ñ–ª—å–∫–∏ –∑ —Ü—å–æ–≥–æ —Å–ø–∏—Å–∫—É**:
[${portList}]
2. –£—Å—ñ –º—ñ—Å—Ç–∞ (to) –º–∞—é—Ç—å –±—É—Ç–∏ **—Ç—ñ–ª—å–∫–∏ –∑ —Ü—å–æ–≥–æ —Å–ø–∏—Å–∫—É**:
[${cityList}]
3. –Ø–∫—â–æ –ø–æ—Ä—Ç –∞–±–æ –º—ñ—Å—Ç–æ –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É ‚Äî **–ø–æ–≤–µ—Ä–Ω–∏ "value": null, "confidence": false**
4. –Ø–∫—â–æ –Ω–∞–∑–≤–∞ —Å—Ö–æ–∂–∞, –∞–ª–µ –Ω–∞–ø–∏—Å–∞–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–æ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–î–∑—ñ–Ω–¥–∞–æ" –∑–∞–º—ñ—Å—Ç—å "–¶–∏–Ω–¥–∞–æ") ‚Äî —Å–ø—Ä–æ–±—É–π –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É –π –ø–æ–≤–µ—Ä–Ω–∏ –π–æ–≥–æ –∑ '"confidence": true'. –Ø–∫—â–æ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π ‚Äî '"value": null', '"confidence": false'.

---

üß† **–í–∏—Ç—è–≥–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:**

\`\`\`json
{
  "from": {
    "value": "–ù–∞–∑–≤–∞ –ø–æ—Ä—Ç—É –£–ö–†–ê–á–ù–°–¨–ö–û–Æ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ null",
    "confidence": true | false
  },
  "to": {
    "value": "–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –£–ö–†–ê–á–ù–°–¨–ö–û–Æ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ null",
    "confidence": true | false
  },
  "weight": {
    "value": —á–∏—Å–ª–æ —É –∫–≥ –∞–±–æ null,
    "confidence": true | false
  },
  "volume": {
    "value": —á–∏—Å–ª–æ —É –º¬≥ –∞–±–æ null,
    "confidence": true | false
  }
}
\`\`\`

---

‚ö†Ô∏è **–£—Ç–æ—á–Ω–µ–Ω–Ω—è**:

- –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ "—Ç–æ–Ω–∞" ‚Äî –ø–µ—Ä–µ–≤–µ–¥–∏ —É **–∫–≥** (1 —Ç–æ–Ω–Ω–∞ = 1000 –∫–≥)
- –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ "–ª—ñ—Ç—Ä" ‚Äî –Ω–µ –≤—Ä–∞—Ö–æ–≤—É–π (–ø–æ–≤–µ—Ä–Ω–∏ volume: null)
- –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ "–º¬≥", "–∫—É–±", "–∫—É–±—ñ—á–Ω–∏–π –º–µ—Ç—Ä" ‚Äî –≤—Ä–∞—Ö–æ–≤—É–π —è–∫ –æ–± º—î–º
- –Ø–∫—â–æ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π —É –∑–Ω–∞—á–µ–Ω–Ω—ñ ‚Äî –∫—Ä–∞—â–µ –ø–æ–≤–µ—Ä—Ç–∞–π 'null' + 'confidence: false'
- –ù–µ –¥–æ–¥–∞–≤–∞–π –ø–æ—è—Å–Ω–µ–Ω—å, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤, —Ç–µ–∫—Å—Ç—É ‚Äî **—Ç—ñ–ª—å–∫–∏ –≤–∞–ª—ñ–¥–Ω–∏–π JSON**

---

–û—Å—å —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
"""${text}"""
`;
}


async function handleAudio(bot, msg, chatId, userState) {
    const fileId = msg.voice?.file_id || msg.audio?.file_id;

    const file = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    const processingMsg = await bot.sendMessage(chatId, 'üéß –û–±—Ä–æ–±–ª—è—é –∞—É–¥—ñ–æ...');

    try {
        const localFilePath = await downloadFile(fileUrl, `audio_${Date.now()}.oga`);

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
        const transcription = await openai.audio.transcriptions.create({
            file: fs.createReadStream(localFilePath),
            model: audio_model,
            language: "uk"
        });

        if (!transcription.text) {
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑ –∞—É–¥—ñ–æ');
        }

        console.log(transcription);

        const text = transcription.text;

        // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        const cleanedText = normalizeTextWithFuzzyMatch(text);

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ GPT –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ —Ç–µ–∫—Å—Ç—É
        const prompt = getPrompt(cleanedText);

        console.log(prompt);

        const gptResponse = await openai.chat.completions.create({
            model: text_model,
            messages: [{ role: 'user', content: prompt }]
        });

        const replyGPT = gptResponse.choices[0].message.content.replace(/```json|```/g, '').trim();

        const cleanedParsed = normalizeFromTo(JSON.parse(replyGPT));
        const reply = JSON.stringify(cleanedParsed);



        let parsed;
        try {
            parsed = JSON.parse(reply);
        } catch (err) {
            console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON:', err);
            await bot.editMessageText('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ GPT.', {
                chat_id: chatId,
                message_id: processingMsg.message_id
            });
            return;
        }


        console.log('===========================PARSED AUDIO===========================')
        console.log(parsed)
        console.log('===========================PARSED AUDIO===========================')


        if (!parsed.from.confidence || !parsed.to.confidence || !parsed.weight.confidence || !parsed.volume.confidence
        || !parsed.from.value || !parsed.to.value || !parsed.weight.value || !parsed.volume.value) {
            userState.set(chatId, {
                originalText: cleanedText,
                originalData: parsed,
                isEditing: true,
                sourceType: 'audio'
            });

            const errorMessage = `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ –∑ –∞—É–¥—ñ–æ. 
${(!parsed.from.value || !parsed.from.confidence) ? '–ü–æ–ª–µ "–ø–æ—Ä—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}
${(!parsed.to.value || !parsed.to.confidence) ? '–ü–æ–ª–µ "–º—ñ—Å—Ç–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}
${(!parsed.weight.value || !parsed.weight.confidence) ? '–ü–æ–ª–µ "–≤–∞–≥–∞" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}
${(!parsed.volume.value || !parsed.volume.confidence) ? '–ü–æ–ª–µ "–æ–±`—î–º" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}

–ó–º—ñ–Ω–∏—Ç–∏?`;

            await bot.sendMessage(chatId, errorMessage, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–¢–∞–∫', callback_data: 'edit_yes' }, { text: '–ù—ñ', callback_data: 'edit_no' }]
                    ]
                }
            });
        } else {
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
            const data = formatShippingInfo(reply);
            const message = await bot.sendMessage(chatId, data, { parse_mode: 'Markdown' });
            await data1CHandler(reply, chatId, bot, message);
        }
    } catch (error) {
        console.error('‚ùå Error in audio processing:', error);
        await bot.editMessageText('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞—É–¥—ñ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', {
            chat_id: chatId,
            message_id: processingMsg.message_id
        });
    }
}


async function handleText(bot, text, chatId) {
    const prompt = getPrompt(text);

    const gptResponse = await openai.chat.completions.create({
        model: text_model,
        messages: [{ role: 'user', content: prompt }]
    });

    const replyGPT = gptResponse.choices[0].message.content.replace(/```json|```/g, '').trim();

    const cleanedReply = normalizeTextWithFuzzyMatch(replyGPT);

    const cleanedParsed = normalizeFromTo(JSON.parse(cleanedReply));
    const reply = JSON.stringify(cleanedParsed);


    if(reply.includes('null') || reply.includes('false')){
        await bot.sendMessage(chatId, reply);
        const obj = JSON.parse(reply);
        await bot.sendMessage(chatId, `–ü—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫ –Ω–µ–º–æ–∂–ª–∏–≤–∏–π.
${(!obj.from.value || !obj.from.confidence) ? '–ü–æ–ª–µ "–ø–æ—Ä—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}
${(!obj.to.value || !obj.to.confidence) ? '–ü–æ–ª–µ "–º—ñ—Å—Ç–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}
${(!obj.weight.value || !obj.weight.confidence) ? '–ü–æ–ª–µ "–≤–∞–≥–∞" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}
${(!obj.volume.value || !obj.volume.confidence) ? '–ü–æ–ª–µ "–æ–±`—î–º" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}
`);
    } else {
        const data = formatShippingInfo(reply);
        const processingMsg = await bot.sendMessage(chatId, data, { parse_mode: 'Markdown' });
        await data1CHandler(reply, chatId, bot, processingMsg);
    }

}


async function handlePhoto(bot, msg, chatId) {
    const fileId = msg.photo[msg.photo.length - 1].file_id; // –ù–∞–π–±—ñ–ª—å—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const file = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    const processingMsg = await bot.sendMessage(chatId, 'üß† –ê–Ω–∞–ª—ñ–∑—É—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...');

    const visionResponse = await openai.chat.completions.create({
        model: "gpt-4-vision-preview",
        messages: [
            {
                role: "user",
                content: [
                    { type: "text", content: "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ –≤–∏—Ç—è–≥–Ω–∏ –¥–∞–Ω—ñ –∑ –Ω—å–æ–≥–æ." },
                    { type: "image_url", image_url: { url: fileUrl } }
                ]
            }
        ]
    });

    const reply = visionResponse.choices[0].message.content;
    await bot.editMessageText(reply, {
        chat_id: chatId,
        message_id: processingMsg.message_id
    });
}


async function handleCorrection(bot, msg, chatId, user, userState) {
    let newText = '';

    if (msg.text) {
        newText = msg.text;
    } else if (msg.voice || msg.audio) {
        const fileId = msg.voice?.file_id || msg.audio?.file_id;
        const file = await bot.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;
        const localFilePath = await downloadFile(fileUrl, `correction_${Date.now()}.oga`);

        const transcription = await openai.audio.transcriptions.create({
            file: fs.createReadStream(localFilePath),
            model: audio_model,
            language: "uk"
        });

        console.log(transcription.text)
        newText = transcription.text;
    }

    const cleanedText = normalizeTextWithFuzzyMatch(newText);
    console.log(user);
    console.log(cleanedText);

    const combinedPrompt = `
–Ñ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –æ–±'—î–∫—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –¥–µ—è–∫–∏–º–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ (confidence: false) –∞–±–æ (value: null):
"""${JSON.stringify(user.originalData)}"""

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Ç–æ—á–Ω–∏–≤ –Ω–∞—Å—Ç—É–ø–Ω–µ:
"""${cleanedText}"""

`;

    const prompt = getPrompt(combinedPrompt);

    const gptResponse = await openai.chat.completions.create({
        model: text_model,
        messages: [{ role: 'user', content: prompt }]
    });

    const replyGPT = gptResponse.choices[0].message.content.replace(/```json|```/g, '').trim();

    const cleanedParsed = normalizeFromTo(JSON.parse(replyGPT));
    const reply = JSON.stringify(cleanedParsed);

    user.correctedData = reply;
    userState.set(chatId, user);

    // Parse the JSON data for better formatting
    let parsedData;
    try {
        parsedData = JSON.parse(reply);
    } catch (err) {
        console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON:', err);
        await bot.sendMessage(chatId, `–û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ:\n${reply}`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ', callback_data: 'confirm_correct' },
                        { text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel_all' }
                    ]
                ]
            }
        });
        return;
    }

    // Create a nicely formatted message
    const formattedMessage = `üì¶ *–û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*

üö¢ *–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:* ${parsedData.from.value || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üìç *–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:* ${parsedData.to.value || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
‚öñÔ∏è *–í–∞–≥–∞:* ${parsedData.weight.value || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'} –∫–≥
üìê *–û–±'—î–º:* ${parsedData.volume.value || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'} –º¬≥`;

    await bot.sendMessage(chatId, formattedMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ', callback_data: 'confirm_correct' },
                    { text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel_all' }
                ]
            ]
        }
    });
}


function formatShippingInfo(data) {
    console.log(data)
    const {
        from,
        to,
        weight,
        volume
    } = JSON.parse(data);

    return `*–î–µ—Ç–∞–ª—ñ –≤–∞–Ω—Ç–∞–∂—É:*
üö¢ *–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:* ${from.value}
üìç *–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:* ${to.value}
‚öñÔ∏è *–í–∞–≥–∞:* ${weight.value} –∫–≥
üìê *–û–± º—î–º:* ${volume.value} –º¬≥

‚è≥ –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤–∞—Ä—Ç—ñ—Å—Ç—å...`;
}


function formatShippingResult(data) {
    // console.log(data)

    return `*–î–µ—Ç–∞–ª—ñ –≤–∞–Ω—Ç–∞–∂—É:*
üö¢ *–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:* ${data.Origin}
üìç *–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:* ${data.Destination}
‚öñÔ∏è *–í–∞–≥–∞:* ${data.Weight} –∫–≥
üìê *–û–± º—î–º:* ${data.Volume} –º¬≥


*–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫:*
üöö *–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ —Å–∫–ª–∞–¥—É:* ${data.Rate.TotalRateCFS} $
üö™ *–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–µ–π:* ${data.Rate.TotalRatePD} $
`;
}


async function data1CHandler(reply, chatId, bot, processingMsg){
    const resultPrice = await connectTo1C(JSON.parse(reply));
    console.log('===========================')
    console.log(resultPrice)
    console.log('===========================')


    if(resultPrice.status === 'ok' && resultPrice.successfully){
        const text = formatShippingResult(resultPrice);

        if(processingMsg){
            await bot.editMessageText(text, {
                chat_id: chatId,
                message_id: processingMsg.message_id,
                parse_mode: 'Markdown'
            })
        }else await bot.sendMessage(chatId, text, {parse_mode: 'Markdown'})
    }

    if(resultPrice.status === 'NOT OK'){
        await bot.sendMessage(chatId, '–ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—Ä–æ—Ä–∞—Ö—É–Ω–∫–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!', );
    } else {



    }
}

module.exports = {
    getPrompt,
    handleAudio,
    handleText,
    handlePhoto,
    handleCorrection,
    formatShippingInfo,
    formatShippingResult,
    data1CHandler
};
