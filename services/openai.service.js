const { OpenAI } = require('openai');
const fs = require('fs');
const { downloadFile, isLikelyOrder } = require('../utils/utils');
const {ports, cities} = require('../constants')

// Initialize OpenAI client
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

/**
 * Generates a prompt for the OpenAI API based on the input text
 * @param {string} text - The input text
 * @returns {string} - The generated prompt
 */
// function getPrompt(text) {
//     const prompt = `
// –¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —É–≤–∞–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –≤–∞–Ω—Ç–∞–∂—É —Ç–∞ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –∑ –Ω—å–æ–≥–æ –∫–ª—é—á–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞—Ä—à—Ä—É—Ç —ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞–Ω—Ç–∞–∂—É.
//
// üîç –ù–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–µ:
// - –û–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä, —á–∏ –≤–∫–∞–∑–∞–Ω–∏–π –ø–æ—Ä—Ç —É –ø–æ–ª—ñ "from" —î —Ä–µ–∞–ª—å–Ω–∏–º, –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ –≤–∏–∑–Ω–∞–Ω–∏–º –ø–æ—Ä—Ç–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —á–µ—Ä–µ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø–æ—Ä—Ç—ñ–≤).
// - –Ø–∫—â–æ —Ç–∞–∫–æ–≥–æ –ø–æ—Ä—Ç—É **–Ω–µ —ñ—Å–Ω—É—î**, –∞–±–æ –Ω–∞–∑–≤–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∞–±–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π —Å–∞–º–µ –ø–æ—Ä—Ç (–∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º—ñ—Å—Ç–æ) ‚Äî –ø–æ–≤–µ—Ä–Ω–∏ **null**: 'null'. –¶–µ –æ–±–æ–≤ º—è–∑–∫–æ–≤–∞ —É–º–æ–≤–∞.
// - –¢–∞–∫ —Å–∞–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä, —á–∏ –≤–∫–∞–∑–∞–Ω–µ –º—ñ—Å—Ü–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤ –ø–æ–ª—ñ "to" (–º—ñ—Å—Ç–æ –∞–±–æ –∫—Ä–∞—ó–Ω–∞) **–¥—ñ–π—Å–Ω–æ —ñ—Å–Ω—É—î**. –Ø–∫—â–æ –≤–æ–Ω–æ –Ω–µ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É—î—Ç—å—Å—è ‚Äî —Ç–∞–∫–æ–∂ –ø–æ–≤–µ—Ä–Ω–∏ **null** 'null'.
//
// üì¶ –ù–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –ø–æ–≤–µ—Ä–Ω–∏ **—Ç—ñ–ª—å–∫–∏** –≤–∞–ª—ñ–¥–Ω–∏–π JSON –∑ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é:
//
// {
//   "from": {
//     "value": "–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∞ –Ω–∞–∑–≤–∞ –ø–æ—Ä—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é, –ª–∏—à–µ –ø–æ—Ä—Ç)",
//     "confidence": true | false
//   },
//   "to": {
//     "value": "–ú—ñ—Å—Ü–µ —Ä–æ–∑–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–±–æ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é)",
//     "confidence": true | false
//   },
//   "weight": {
//     "value": "–í–∞–≥–∞ –≤–∞–Ω—Ç–∞–∂—É —É –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ –∞–±–æ null)",
//     "confidence": true | false
//   },
//   "volume": {
//     "value": "–û–± º—î–º –≤–∞–Ω—Ç–∞–∂—É —É –∫—É–±—ñ—á–Ω–∏—Ö –º–µ—Ç—Ä–∞—Ö (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ –∞–±–æ null)",
//     "confidence": true | false
//   }
// }
//
// üìå –î–æ–¥–∞—Ç–∫–æ–≤—ñ —É–º–æ–≤–∏:
// - –Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –∑–≥–∞–¥—É—î—Ç—å—Å—è –∞–±–æ –Ω–µ—á—ñ—Ç–∫–∞ ‚Äî –≤–∫–∞–∂–∏ "value": null —ñ "confidence": false.
// - –Ø–∫—â–æ –æ–¥–∏–Ω–∏—Ü—ñ —ñ–Ω—à—ñ (—Ç–æ–Ω–Ω–∏, –ª—ñ—Ç—Ä–∏, —Ñ—É—Ç¬≥ —Ç–æ—â–æ) ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç—É–π —É –∫–≥ –∞–±–æ –º¬≥.
// - –ü–æ–∑–Ω–∞—á–∞–π "confidence": true —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–ø–µ–≤–Ω–µ–Ω–∏–π –Ω–∞ 100%.
// - **–ù—ñ–∫–æ–ª–∏** –Ω–µ –¥–æ–¥–∞–≤–∞–π –∂–æ–¥–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å ‚Äî –ª–∏—à–µ JSON –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–±'—î–∫—Ç.
// - –Ø–∫—â–æ –ø–æ—Ä—Ç "from" –∞–±–æ –º—ñ—Å—Ü–µ "to" –Ω–µ –≤–∞–ª—ñ–¥–Ω–µ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î ‚Äî **–≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏** 'null'.
//
// –û—Å—å —Ç–µ–∫—Å—Ç:
// """${text}"""
// `;
//
//     return prompt;
// }

function getPrompt(text) {
    const portList = ports.map(port => `"${port.value}"`).join(', ');
    const cityList = cities.map(city => `"${city.value}"`).join(', ');


    // - –û–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä, —á–∏ –≤–∫–∞–∑–∞–Ω–∏–π –ø–æ—Ä—Ç —É –ø–æ–ª—ñ "from" —î —Ä–µ–∞–ª—å–Ω–∏–º, –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ –≤–∏–∑–Ω–∞–Ω–∏–º –ø–æ—Ä—Ç–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —á–µ—Ä–µ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø–æ—Ä—Ç—ñ–≤).
    // - –Ø–∫—â–æ —Ç–∞–∫–æ–≥–æ –ø–æ—Ä—Ç—É **–Ω–µ —ñ—Å–Ω—É—î**, –∞–±–æ –Ω–∞–∑–≤–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∞–±–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π —Å–∞–º–µ –ø–æ—Ä—Ç (–∞ –ø—Ä–æ—Å—Ç–æ –º—ñ—Å—Ç–æ) ‚Äî –ø–æ–≤–µ—Ä–Ω–∏ **null**: 'null'. –¶–µ –æ–±–æ–≤ º—è–∑–∫–æ–≤–∞ —É–º–æ–≤–∞.
    // - –¢–∞–∫ —Å–∞–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä, —á–∏ –≤–∫–∞–∑–∞–Ω–µ –º—ñ—Å—Ü–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤ –ø–æ–ª—ñ "to" (–º—ñ—Å—Ç–æ ) **–¥—ñ–π—Å–Ω–æ —ñ—Å–Ω—É—î**. –Ø–∫—â–æ –≤–æ–Ω–æ –Ω–µ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É—î—Ç—å—Å—è ‚Äî —Ç–∞–∫–æ–∂ –ø–æ–≤–µ—Ä–Ω–∏ **null** 'null'.


    const prompt = `
–¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –≤–∞–Ω—Ç–∞–∂—É —Ç–∞ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –∑ –Ω—å–æ–≥–æ –∫–ª—é—á–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞—Ä—à—Ä—É—Ç —ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞–Ω—Ç–∞–∂—É.

üîç –í–∞–∂–ª–∏–≤–æ:

- –ú–∞—î—à **–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏**, —á–∏ –ø–æ—Ä—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–ø–æ–ª–µ "from") **—î –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –ø–æ—Ä—Ç—ñ–≤**: [${portList}]
- –Ø–∫—â–æ "from" –Ω–µ –≤—Ö–æ–¥–∏—Ç—å —É —Ü–µ–π —Å–ø–∏—Å–æ–∫ ‚Äî **–≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏** –ª–∏—à–µ: 'null'
- –¢–µ —Å–∞–º–µ –∑ –º—ñ—Å—Ü–µ–º –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–ø–æ–ª–µ "to"): —è–∫—â–æ –π–æ–≥–æ –Ω–µ –º–∞—î –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –º—ñ—Å—Ç**: [${cityList}] ‚Äî **–≤—ñ–¥–ø–æ–≤—ñ–¥—å —É –ø–æ–ª—ñ "value" –º–∞—î –±—É—Ç–∏**: null, –∞ —É –ø–æ–ª—ñ "confidence": false
üì¶ –ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ –≤–∞–ª—ñ–¥–Ω–∏–π JSON —É —Ü—å–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:

{
    "from": {
        "value": "–ù–∞–∑–≤–∞ –ø–æ—Ä—Ç—É –ê–ù–ì–õ–Ü–ô–°–¨–ö–û–Æ –í–ò–ö–õ–Æ–ß–ù–û –ó–Ü –°–ü–ò–°–ö–£ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –ø–æ—Ä—Ç—ñ–≤ –ê–ë–û 'null'",
        "confidence": true | false
    },
    "to": {
        "value": "–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –ê–ù–ì–õ–Ü–ô–°–¨–ö–û–Æ –í–ò–ö–õ–Æ–ß–ù–û –ó–Ü –°–ü–ò–°–ö–£ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –º—ñ—Å—Ç –ê–ë–û 'null'",
        "confidence": true | false
    },
    "weight": {
        "value": —á–∏—Å–ª–æ —É –∫–≥ (–±–µ–∑ –ø–æ–º–∏–ª–æ–∫) –∞–±–æ null,
        "confidence": true | false
    },
    "volume": {
        "value": —á–∏—Å–ª–æ —É –º¬≥ –∞–±–æ null,
        "confidence": true | false
    }
}

üìå –£—Ç–æ—á–Ω–µ–Ω–Ω—è:
- –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ—á—ñ—Ç–∫–µ ‚Äî —Å—Ç–∞–≤ value: null —ñ confidence: false
- –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ –≤ —ñ–Ω—à–∏—Ö –æ–¥–∏–Ω–∏—Ü—è—Ö (—Ç–æ–Ω–Ω–∏, –ª—ñ—Ç—Ä–∏ —Ç–æ—â–æ) ‚Äî –ø–µ—Ä–µ–≤–µ–¥–∏ —É –∫–≥ –∞–±–æ –º¬≥
- –ù–µ –¥–æ–¥–∞–≤–∞–π –ø–æ—è—Å–Ω–µ–Ω—å. –í–∏–≤—ñ–¥ –º–∞—î –±—É—Ç–∏ **–ª–∏—à–µ JSON** –∞–±–æ 'null'
- –ù–µ –ø—Ä–∏–¥—É–º—É–π —Å–≤–æ—ó –∑–Ω–∞—á–µ–Ω–Ω—è —á–∏ –Ω–∞–∑–≤–∏!!!
- –Ø–∫—â–æ –º—ñ—Å—Ç–∞ –∞–±–æ –ø–æ—Ä—Ç—É –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö, —É –ø–æ–ª—ñ "value" **–û–ë–û–í'–Ø–ó–ö–û–í–û** –º–∞—î –±—É—Ç–∏ null
‚ùó –ù–µ –º–Ω–æ–∂ –≤–∞–≥—É –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏. –Ø–∫—â–æ –Ω–∞–ø–∏—Å–∞–Ω–æ "20 –∫—ñ–ª–æ–≥—Ä–∞–º—ñ–≤", —Ç–æ —Ü–µ 20, –∞ –Ω–µ 20000.
- –Ø–∫—â–æ –æ–¥–∏–Ω–∏—Ü—ñ —ñ–Ω—à—ñ (—Ç–æ–Ω–Ω–∏, –ª—ñ—Ç—Ä–∏) ‚Äî –ø–µ—Ä–µ–≤–µ–¥–∏ —Ç–æ—á–Ω–æ


–û—Å—å —Ç–µ–∫—Å—Ç:
"""${text}"""
`;

    return prompt;
}


/**
 * Handles audio messages by transcribing them and extracting information
 * @param {Object} bot - The Telegram bot instance
 * @param {Object} msg - The message object
 * @param {number} chatId - The chat ID
 * @param {Object} userState - The user state map
 * @returns {Promise<void>}
 */
async function handleAudio(bot, msg, chatId, userState) {
    const fileId = msg.voice?.file_id || msg.audio?.file_id;

    const file = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    const processingMsg = await bot.sendMessage(chatId, 'üéß –û–±—Ä–æ–±–ª—è—é –∞—É–¥—ñ–æ...');

    try {
        const localFilePath = await downloadFile(fileUrl, `audio_${Date.now()}.oga`);

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
        const transcription = await openai.audio.transcriptions.create({
            file: fs.createReadStream(localFilePath),
            model: "whisper-1",
            language: "uk"
        });

        if (!transcription.text) {
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑ –∞—É–¥—ñ–æ');
        }

        console.log(transcription);

        const text = transcription.text;

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ GPT –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ —Ç–µ–∫—Å—Ç—É
        const prompt = getPrompt(text);

        const gptResponse = await openai.chat.completions.create({
            model: 'gpt-3.5-turbo',
            messages: [{ role: 'user', content: prompt }]
        });

        console.log(gptResponse);

        const reply = gptResponse.choices[0].message.content;
        console.log(reply);

        let parsed;
        try {
            parsed = JSON.parse(reply);
        } catch (err) {
            console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON:', err);
            await bot.editMessageText('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ GPT.', {
                chat_id: chatId,
                message_id: processingMsg.message_id
            });
            return;
        }

        if (!parsed.from.confidence || !parsed.to.confidence || !parsed.weight.confidence || !parsed.volume.confidence) {
            userState.set(chatId, {
                originalText: text,
                originalData: parsed,
                isEditing: true,
                sourceType: 'audio'
            });

            await bot.sendMessage(chatId, '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ –∑ –∞—É–¥—ñ–æ. –ó–º—ñ–Ω–∏—Ç–∏?', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–¢–∞–∫', callback_data: 'edit_yes' }, { text: '–ù—ñ', callback_data: 'edit_no' }]
                    ]
                }
            });
        } else {
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
            await bot.editMessageText(reply, {
                chat_id: chatId,
                message_id: processingMsg.message_id
            });
        }
    } catch (error) {
        console.error('‚ùå Error in audio processing:', error);
        await bot.editMessageText('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞—É–¥—ñ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', {
            chat_id: chatId,
            message_id: processingMsg.message_id
        });
    }
}

/**
 * Handles text messages by extracting information
 * @param {Object} bot - The Telegram bot instance
 * @param {string} text - The text message
 * @param {number} chatId - The chat ID
 * @returns {Promise<void>}
 */
async function handleText(bot, text, chatId) {
    const prompt = getPrompt(text);

    const gptResponse = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: prompt }]
    });

    const reply = gptResponse.choices[0].message.content;

    if(reply.includes('null') || reply.includes('false')){
        await bot.sendMessage(chatId, reply);
        const obj = JSON.parse(reply);
        await bot.sendMessage(chatId, `–ü—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫ –Ω–µ–º–æ–∂–ª–∏–≤–∏–π.
${(!obj.from.value || !obj.from.confidence || !obj.to.value || !obj.to.confidence) ? '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ç —ñ –ø–æ—Ä—Ç—ñ–≤.' : ''}
${(!obj.weight.value || !obj.weight.confidence || !obj.volume.value || !obj.volume.confidence) ? '–î–∞–Ω—ñ –≤–∞–≥–∏ —á–∏ –æ–±`—î–º—É –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ.' : ''}
`);
    } else {
        await bot.sendMessage(chatId, reply);
        await bot.sendMessage(chatId, '–î–∞–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤ 1–°');

    }

}

/**
 * Handles photo messages by analyzing them
 * @param {Object} bot - The Telegram bot instance
 * @param {Object} msg - The message object
 * @param {number} chatId - The chat ID
 * @returns {Promise<void>}
 */
async function handlePhoto(bot, msg, chatId) {
    const fileId = msg.photo[msg.photo.length - 1].file_id; // –ù–∞–π–±—ñ–ª—å—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const file = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    const processingMsg = await bot.sendMessage(chatId, 'üß† –ê–Ω–∞–ª—ñ–∑—É—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...');

    const visionResponse = await openai.chat.completions.create({
        model: "gpt-4-vision-preview",
        messages: [
            {
                role: "user",
                content: [
                    { type: "text", content: "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ –≤–∏—Ç—è–≥–Ω–∏ –¥–∞–Ω—ñ –∑ –Ω—å–æ–≥–æ." },
                    { type: "image_url", image_url: { url: fileUrl } }
                ]
            }
        ]
    });

    const reply = visionResponse.choices[0].message.content;
    await bot.editMessageText(reply, {
        chat_id: chatId,
        message_id: processingMsg.message_id
    });
}

/**
 * Handles correction messages
 * @param {Object} bot - The Telegram bot instance
 * @param {Object} msg - The message object
 * @param {number} chatId - The chat ID
 * @param {Object} user - The user object
 * @param {Object} userState - The user state map
 * @returns {Promise<void>}
 */
async function handleCorrection(bot, msg, chatId, user, userState) {
    let newText = '';

    if (msg.text) {
        newText = msg.text;
    } else if (msg.voice || msg.audio) {
        const fileId = msg.voice?.file_id || msg.audio?.file_id;
        const file = await bot.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;
        const localFilePath = await downloadFile(fileUrl, `correction_${Date.now()}.oga`);

        const transcription = await openai.audio.transcriptions.create({
            file: fs.createReadStream(localFilePath),
            model: "whisper-1",
            language: "uk"
        });

        newText = transcription.text;
    }

    console.log(user);

    const combinedPrompt = `
–Ñ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –æ–±'—î–∫—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –¥–µ—è–∫–∏–º–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ (confidence: false):
"""${user.originalData}"""

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Ç–æ—á–Ω–∏–≤ –Ω–∞—Å—Ç—É–ø–Ω–µ:
"""${newText}"""

–ù–∞ –æ—Å–Ω–æ–≤—ñ –æ–±–æ—Ö —á–∞—Å—Ç–∏–Ω –æ–Ω–æ–≤–∏ –æ–± º—î–∫—Ç –¥–∞–Ω–∏—Ö —Ç–∞ –ø–æ–≤–µ—Ä–Ω–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –æ–±'—î–∫—Ç (–¥–∏–≤–∏—Å—å –ø—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è).
`;

    console.log(combinedPrompt);

    const gptResponse = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: combinedPrompt }]
    });

    const reply = gptResponse.choices[0].message.content;

    user.correctedData = reply;
    userState.set(chatId, user);

    await bot.sendMessage(chatId, `–û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ:\n${reply}`, {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ', callback_data: 'confirm_correct' },
                    { text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel_all' }
                ]
            ]
        }
    });
}

module.exports = {
    getPrompt,
    handleAudio,
    handleText,
    handlePhoto,
    handleCorrection
};