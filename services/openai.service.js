const {OpenAI} = require('openai');
const fs = require('fs');
const {downloadFile, normalizeTextWithFuzzyMatch, normalizeFromTo, isLikelyOrder, getValidityPeriod} = require('../utils/utils');
const {ports, cities, supportedLanguages} = require('../constants')
const {connectTo1C} = require('./data1C.service');
const {post} = require("axios");
const {v4: uuidv4} = require('uuid');


// Initialize OpenAI client
const openai = new OpenAI({apiKey: process.env.OPENAI_API_KEY});
const text_model = 'gpt-3.5-turbo';
// const text_model = 'gpt-4-turbo';
const audio_model = 'whisper-1';


// function getPrompt(text) {
//     console.log('=================================TEXT PROMPT==================================');
//     console.log(text);
//     console.log('=================================TEXT PROMPT==================================');
//
//     const portList = ports.map(port => `"${port.text}"`).join(', ');
//     const cityList = cities.map(city => `"${city.text}"`).join(', ');
//
//     return `
// –¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –≤–∞–Ω—Ç–∞–∂—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –æ—Ç—Ä–∏–º–∞–Ω–∏–π –∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è) —Ç–∞ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –∑ –Ω—å–æ–≥–æ –∫–ª—é—á–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞—Ä—à—Ä—É—Ç —ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞–Ω—Ç–∞–∂—É.
//
// üì¶ –ü—Ä–∞—Ü—é–π —á—ñ—Ç–∫–æ –∑–∞ –ø—Ä–∞–≤–∏–ª–∞–º–∏:
//
// üîπ **"from"** ‚Äî –ø–æ—Ä—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
// üîπ **"to"** ‚Äî –º—ñ—Å—Ç–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
// üîπ **"weight"** ‚Äî –≤–∞–≥–∞ —É **–∫–≥**
// üîπ **"volume"** ‚Äî –æ–± º—î–º —É **–º¬≥**
//
// ---
//
// üîç **–ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:**
//
// 1. –£—Å—ñ –ø–æ—Ä—Ç–∏ (from) –º–∞—é—Ç—å –±—É—Ç–∏ **—Ç—ñ–ª—å–∫–∏ –∑ —Ü—å–æ–≥–æ —Å–ø–∏—Å–∫—É**:
// [${portList}]
// 2. –£—Å—ñ –º—ñ—Å—Ç–∞ (to) –º–∞—é—Ç—å –±—É—Ç–∏ **—Ç—ñ–ª—å–∫–∏ –∑ —Ü—å–æ–≥–æ —Å–ø–∏—Å–∫—É**:
// [${cityList}]
// 3. –Ø–∫—â–æ –ø–æ—Ä—Ç –∞–±–æ –º—ñ—Å—Ç–æ –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É ‚Äî **–ø–æ–≤–µ—Ä–Ω–∏ "value": null, "confidence": false**
// 4. –Ø–∫—â–æ –Ω–∞–∑–≤–∞ —Å—Ö–æ–∂–∞, –∞–ª–µ –Ω–∞–ø–∏—Å–∞–Ω–∞ –∑ –ø–æ–º–∏–ª–∫–æ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–î–∑—ñ–Ω–¥–∞–æ" –∑–∞–º—ñ—Å—Ç—å "–¶–∏–Ω–¥–∞–æ") ‚Äî —Å–ø—Ä–æ–±—É–π –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É –π –ø–æ–≤–µ—Ä–Ω–∏ –π–æ–≥–æ –∑ '"confidence": true'. –Ø–∫—â–æ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π ‚Äî '"value": null', '"confidence": false'.
//
// ---
//
// üß† **–í–∏—Ç—è–≥–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON:**
//
// \`\`\`json
// {
//   "from": {
//     "value": "–ù–∞–∑–≤–∞ –ø–æ—Ä—Ç—É –£–ö–†–ê–á–ù–°–¨–ö–û–Æ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ null",
//     "confidence": true | false
//   },
//   "to": {
//     "value": "–ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –£–ö–†–ê–á–ù–°–¨–ö–û–Æ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ null",
//     "confidence": true | false
//   },
//   "weight": {
//     "value": —á–∏—Å–ª–æ —É –∫–≥ –∞–±–æ null,
//     "confidence": true | false
//   },
//   "volume": {
//     "value": —á–∏—Å–ª–æ —É –º¬≥ –∞–±–æ null,
//     "confidence": true | false
//   },
//   "language": {
//     "value": –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–≤–∏, —è–∫–æ—é —î –Ω–∞–ø–∏—Å–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è,
//     "confidence": true | false
//   },
// }
// \`\`\`
//
// ---
//
// ‚ö†Ô∏è **–£—Ç–æ—á–Ω–µ–Ω–Ω—è**:
//
// - –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ "—Ç–æ–Ω–∞" ‚Äî –ø–µ—Ä–µ–≤–µ–¥–∏ —É **–∫–≥** (1 —Ç–æ–Ω–Ω–∞ = 1000 –∫–≥) –í–ò–ó–ù–ê–ß–ê–ô –ü–†–ê–í–ò–õ–¨–ù–û
// - –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ "–ª—ñ—Ç—Ä" ‚Äî –Ω–µ –≤—Ä–∞—Ö–æ–≤—É–π (–ø–æ–≤–µ—Ä–Ω–∏ volume: null)
// - –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ "–º¬≥", "–∫—É–±", "–∫—É–±—ñ—á–Ω–∏–π –º–µ—Ç—Ä" ‚Äî –≤—Ä–∞—Ö–æ–≤—É–π —è–∫ –æ–± º—î–º
// - –Ø–∫—â–æ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π —É –∑–Ω–∞—á–µ–Ω–Ω—ñ ‚Äî –∫—Ä–∞—â–µ –ø–æ–≤–µ—Ä—Ç–∞–π 'null' + 'confidence: false'
// - –ù–µ –¥–æ–¥–∞–≤–∞–π –ø–æ—è—Å–Ω–µ–Ω—å, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤, —Ç–µ–∫—Å—Ç—É ‚Äî **—Ç—ñ–ª—å–∫–∏ –≤–∞–ª—ñ–¥–Ω–∏–π JSON**
//
// ---
//
// –û—Å—å —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
// """${text}"""
// `;
// }



function getPrompt(text) {
    console.log('=================================TEXT PROMPT==================================');
    console.log(text);
    console.log('=================================TEXT PROMPT==================================');

    const portList = ports.map(port => `"${port.value}"`).join(', ');
    const cityList = cities.map(city => `"${city.value}"`).join(', ');

    return `
You are a skilled logistics assistant. Your task is to analyze a cargo transportation order text (e.g., transcribed from a voice message) and extract key route and cargo information.

Follow the rules precisely:

üîπ **"from"** ‚Äî departure port  
üîπ **"to"** ‚Äî destination city  
üîπ **"weight"** ‚Äî weight in **kg**  
üîπ **"volume"** ‚Äî volume in **m¬≥**

---

**Validation rules:**

1. All ports ("from") must be **only from this list**:  
[${portList}]
2. All cities ("to") must be **only from this list**:  
[${cityList}]
3. If the port or city is not in the corresponding list ‚Äî **return "value": null, "confidence": false**
4. If the name is similar but misspelled (e.g., "Dzindao" instead of "Qingdao") ‚Äî try to find the closest match from the list and return it with '"confidence": true'. If unsure ‚Äî return '"value": null', '"confidence": false'.

---

**Return the result in the following JSON format:**  

\`\`\`json
{
  "from": {
    "value": "Port name IN ENGLISH from the list or null",
    "confidence": true | false
  },
  "to": {
    "value": "City name IN ENGLISH from the list or null",
    "confidence": true | false
  },
  "weight": {
    "value": number in kg or null,
    "confidence": true | false
  },
  "volume": {
    "value": number in m¬≥ or null,
    "confidence": true | false
  },
  "language": {
    "value": detected language of the order text in format (pl-PL, uk-UA, en-US, etc.),
    "confidence": true | false
  }
}
\`\`\`

---

‚ö†Ô∏è **Additional notes:**

- If "tons" are mentioned ‚Äî convert to **kg** (1 ton = 1000 kg) ‚Äî BE PRECISE  
- If "liters" are mentioned ‚Äî ignore them (return volume: null)  
- If "m¬≥", "cubic", "cubic meter" are mentioned ‚Äî treat as volume  
- If you are not confident in a value ‚Äî return 'null' and 'confidence: false'  
- Do **not** add explanations, comments, or extra text ‚Äî **return valid JSON only**

---

Here is the order text:  
"""${text}"""
`;
}


function getPromptResponse(text, language) {
     supportedLanguages.includes(language) || (language = 'en-US')

    const prompt = `
Here is the data:
"""${text}"""

Follow these exact instructions:

You are an experienced logistics assistant!
Give me a concise, emotionally engaging response based on this data, with a very positive and enthusiastic tone ‚Äî one that would make the client want to place an order!
Use the provided data in your reply.

Important notes:
- TotalRateCFS ‚Äî delivery via warehouse, in US dollars ($)
- TotalRatePD ‚Äî direct delivery (PD), in US dollars ($)
- Volume ‚Äî measured in cubic meters (m¬≥)
- Weight ‚Äî measured in kilograms (kg)

!The reply MUST be in this language: ${language}! This is very important.
Max 3-4 sentences.
`

    return prompt;
}

// Highlight the final cost with a single "*" (not "**").


async function handleAudio(bot, msg, chatId, userState, sessionMap, data1CMap) {
    const sessionState = sessionMap.get(chatId);
    sessionMap.delete(chatId);

    const fileId = msg.voice?.file_id || msg.audio?.file_id;

    const file = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    const processingMsg = await bot.sendMessage(chatId, 'üéß –û–±—Ä–æ–±–ª—è—é –∞—É–¥—ñ–æ...');

    try {
        const localFilePath = await downloadFile(fileUrl, `audio_${Date.now()}.oga`);

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
        const transcription = await openai.audio.transcriptions.create({
            file: fs.createReadStream(localFilePath),
            model: audio_model,
            // language: "uk"
        });

        if (!transcription.text) {
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑ –∞—É–¥—ñ–æ');
        }

        const text = transcription.text;
        console.log(text)

        // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        const cleanedText = normalizeTextWithFuzzyMatch(text);

        // if (!isLikelyOrder(cleanedText)) {
        //     return bot.sendMessage(chatId, '–¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –∑–∞–ø–∏—Ç —â–æ–¥–æ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –≤–∞–Ω—Ç–∞–∂—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –¥–æ—Å—Ç–∞–≤–∫–∏.');
        // }

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ GPT –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ —Ç–µ–∫—Å—Ç—É
        const prompt = getPrompt(cleanedText);

        const gptResponse = await openai.chat.completions.create({
            model: text_model,
            messages: [{role: 'user', content: prompt}]
        });

        const replyGPT = gptResponse.choices[0].message.content.replace(/```json|```/g, '').trim();

        const cleanedParsed = normalizeFromTo(JSON.parse(replyGPT));
        const reply = JSON.stringify(cleanedParsed);


        let parsed;
        try {
            parsed = JSON.parse(reply);
        } catch (err) {
            console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON:', err);
            await bot.editMessageText('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ GPT.', {
                chat_id: chatId,
                message_id: processingMsg.message_id
            });
            return;
        }

        console.log('===========================PARSED AUDIO===========================')
        console.log(parsed)
        console.log('===========================PARSED AUDIO===========================')

        if (!parsed.from.confidence || !parsed.to.confidence || !parsed.weight.confidence || !parsed.volume.confidence
            || !parsed.from.value || !parsed.to.value || !parsed.weight.value || !parsed.volume.value) {

            userState.set(chatId, {
                originalText: cleanedText,
                originalData: parsed,
                isEditing: true,
                sourceType: 'audio'
            });

            const errorMessage = `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ –∑ –∞—É–¥—ñ–æ. 
${(!parsed.from.value || !parsed.from.confidence) ? '–ü–æ–ª–µ "–ø–æ—Ä—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}
${(!parsed.to.value || !parsed.to.confidence) ? '–ü–æ–ª–µ "–º—ñ—Å—Ç–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}
${(!parsed.weight.value || !parsed.weight.confidence) ? '–ü–æ–ª–µ "–≤–∞–≥–∞" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}
${(!parsed.volume.value || !parsed.volume.confidence) ? '–ü–æ–ª–µ "–æ–±`—î–º" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}

–ó–º—ñ–Ω–∏—Ç–∏?`;

            await bot.sendMessage(chatId, errorMessage, {
                reply_markup: {
                    inline_keyboard: [
                        [{text: '–¢–∞–∫', callback_data: 'edit_yes'}, {text: '–ù—ñ', callback_data: 'edit_no'}]
                    ]
                }
            });
        } else {
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
            const data = formatShippingInfo(reply);
            const message = await bot.sendMessage(chatId, data, {parse_mode: 'Markdown'});

            await data1CHandler(reply, chatId, bot, message, sessionState, sessionMap, data1CMap);
        }
    } catch (error) {
        console.error('‚ùå Error in audio processing:', error);
        await bot.editMessageText('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞—É–¥—ñ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', {
            chat_id: chatId,
            message_id: processingMsg.message_id
        });
    }
}


async function handleText(bot, text, chatId, sessionMap, data1CMap) {
    const sessionState = sessionMap.get(chatId);
    sessionMap.delete(chatId);

    const cleanedText = normalizeTextWithFuzzyMatch(text);

    const prompt = getPrompt(cleanedText);

    const gptResponse = await openai.chat.completions.create({
        model: text_model,
        messages: [{role: 'user', content: prompt}]
    });

    const replyGPT = gptResponse.choices[0].message.content.replace(/```json|```/g, '').trim();

    const cleanedParsed = normalizeFromTo(JSON.parse(replyGPT));

    console.log('===========================PARSED TEXT===========================')
    console.log(cleanedParsed)
    console.log('===========================PARSED TEXT===========================')
    const reply = JSON.stringify(cleanedParsed);
    // console.log(reply)


    if (reply.includes('null') || reply.includes('false')) {
        const obj = JSON.parse(reply);
        await bot.sendMessage(chatId, `–ü—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫ –Ω–µ–º–æ–∂–ª–∏–≤–∏–π.
${(!obj.from.value || !obj.from.confidence) ? '–ü–æ–ª–µ "–ø–æ—Ä—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}
${(!obj.to.value || !obj.to.confidence) ? '–ü–æ–ª–µ "–º—ñ—Å—Ç–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}
${(!obj.weight.value || !obj.weight.confidence) ? '–ü–æ–ª–µ "–≤–∞–≥–∞" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}
${(!obj.volume.value || !obj.volume.confidence) ? '–ü–æ–ª–µ "–æ–±`—î–º" –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ.' : ''}
`);
    } else {
        const data = formatShippingInfo(reply);
        const processingMsg = await bot.sendMessage(chatId, data, {parse_mode: 'Markdown'});
        await data1CHandler(reply, chatId, bot, processingMsg, sessionState, sessionMap, data1CMap);
    }

}


async function handlePhoto(bot, msg, chatId) {
    const fileId = msg.photo[msg.photo.length - 1].file_id; // –ù–∞–π–±—ñ–ª—å—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const file = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    const processingMsg = await bot.sendMessage(chatId, 'üß† –ê–Ω–∞–ª—ñ–∑—É—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...');

    const visionResponse = await openai.chat.completions.create({
        model: "gpt-4-vision-preview",
        messages: [
            {
                role: "user",
                content: [
                    {type: "text", content: "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ –≤–∏—Ç—è–≥–Ω–∏ –¥–∞–Ω—ñ –∑ –Ω—å–æ–≥–æ."},
                    {type: "image_url", image_url: {url: fileUrl}}
                ]
            }
        ]
    });

    const reply = visionResponse.choices[0].message.content;
    await bot.editMessageText(reply, {
        chat_id: chatId,
        message_id: processingMsg.message_id
    });
}


async function handleCorrection(bot, msg, chatId, user, userState, sessionState) {
    let newText = '';
    if(sessionState !== 'correction') return


    if (msg.text) {
        newText = msg.text;
    } else if (msg.voice || msg.audio) {
        const fileId = msg.voice?.file_id || msg.audio?.file_id;
        const file = await bot.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;
        const localFilePath = await downloadFile(fileUrl, `correction_${Date.now()}.oga`);

        const transcription = await openai.audio.transcriptions.create({
            file: fs.createReadStream(localFilePath),
            model: audio_model,
            language: "uk"
        });

        console.log(transcription.text)
        newText = transcription.text;
    }

    const cleanedText = normalizeTextWithFuzzyMatch(newText);
    console.log(user);
    console.log(cleanedText);

    const combinedPrompt = `
–Ñ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –æ–±'—î–∫—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –¥–µ—è–∫–∏–º–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ (confidence: false) –∞–±–æ (value: null):
"""${JSON.stringify(user.originalData)}"""

–†–µ—à—Ç–∞ –ø–æ–ª—ñ–≤ (confidence: true) –ø–æ–≤–∏–Ω–Ω—ñ **–∑–∞–ª–∏—à–∏—Ç–∏—Å—å, —è–∫—ñ –±—É–ª–∏**

–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Ç–æ—á–Ω–∏–≤ –Ω–∞—Å—Ç—É–ø–Ω–µ:
"""${cleanedText}"""
`;

    const prompt = getPrompt(combinedPrompt);

    const gptResponse = await openai.chat.completions.create({
        model: text_model,
        messages: [{role: 'user', content: prompt}]
    });

    const replyGPT = gptResponse.choices[0].message.content.replace(/```json|```/g, '').trim();

    const cleanedParsed = normalizeFromTo(JSON.parse(replyGPT));
    const reply = JSON.stringify(cleanedParsed);

    user.correctedData = reply;
    userState.set(chatId, user);

    // Parse the JSON data for better formatting
    let parsedData;
    try {
        parsedData = JSON.parse(reply);
    } catch (err) {
        console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON:', err);
        await bot.sendMessage(chatId, `–û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ:\n${reply}`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {text: '‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ', callback_data: 'confirm_correct'},
                        {text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel_all'}
                    ]
                ]
            }
        });
        return;
    }

    // Create a nicely formatted message
    const formattedMessage = `üì¶ *–û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:*

üö¢ *–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:* ${parsedData.from.value || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üìç *–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:* ${parsedData.to.value || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
‚öñÔ∏è *–í–∞–≥–∞:* ${parsedData.weight.value || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'} –∫–≥
üìê *–û–±'—î–º:* ${parsedData.volume.value || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'} –º¬≥`;

    await bot.sendMessage(chatId, formattedMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [
                    {text: '‚úÖ –í—Å–µ –≤—ñ—Ä–Ω–æ', callback_data: 'confirm_correct'},
                    {text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel_all'}
                ]
            ]
        }
    });
}


function formatShippingInfo(data) {
    console.log(data)
    const {
        from,
        to,
        weight,
        volume
    } = JSON.parse(data);

    return `*–î–µ—Ç–∞–ª—ñ –≤–∞–Ω—Ç–∞–∂—É:*
üö¢ *–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:* ${from.value}
üìç *–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:* ${to.value}
‚öñÔ∏è *–í–∞–≥–∞:* ${weight.value} –∫–≥
üìê *–û–± º—î–º:* ${volume.value} –º¬≥

‚è≥ –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –≤–∞—Ä—Ç—ñ—Å—Ç—å...`;
}


function formatShippingResult(data) {
    // console.log(data)

    return `*–î–µ—Ç–∞–ª—ñ –≤–∞–Ω—Ç–∞–∂—É:*
üö¢ *–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:* ${data.Origin}
üìç *–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:* ${data.Destination}
‚öñÔ∏è *–í–∞–≥–∞:* ${data.Weight} –∫–≥
üìê *–û–± º—î–º:* ${data.Volume} –º¬≥


*–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫:*
üöö *–î–æ—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Å–∫–ª–∞–¥:* ${data.Rate.TotalRateCFS} $
üö™ *–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ü–î:* ${data.Rate.TotalRatePD} $
`;
}


async function data1CHandler(reply, chatId, bot, processingMsg, sessionState, sessionMap, data1CMap) {
    const {from, to, volume, weight, language} = JSON.parse(reply);

    console.log('==================== USER LANGUAGE =============================')
    console.log(language)
    console.log('==================== USER LANGUAGE =============================')

    if (!from.value || !to.value || !volume.value || !weight.value) {
        return bot.sendMessage(chatId, '–ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—Ä–æ—Ä–∞—Ö—É–Ω–∫–æ–º. –ù–µ–º–∞—î –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö!');
    }

    if (volume.value > 50 || weight.value > 12000) {
        return bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞ –∑–≤`—è–∂—ñ—Ç—å—Å—è –∑ –≤–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ä–∞—Ö—É–Ω–∫—É');
    }

    const aiData = JSON.parse(reply);

    data1CMap.set(chatId, aiData);

    const data = {
        "type": 'LCL_Settlement',
        "Origin": aiData.from.value,
        "Destination": aiData.to.value,
        "Volume": aiData.volume.value.toString(),
        "Weight": aiData.weight.value.toString(),
        "userId": chatId
    }

    const resultPrice = await connectTo1C(data);
    console.log('============RESULT FORM 1C===============')
    console.log(resultPrice)
    console.log('============RESULT FORM 1C===============')


    if (resultPrice.status === 'ok' && resultPrice.successfully) {
        // const text = formatShippingResult(resultPrice);

        const {status, successfully, Rate, ...result} = resultPrice;

        result.TotalRateCFS = Rate.TotalRateCFS;
        result.TotalRatePD = Rate.TotalRatePD;


        if(language.value === 'uk-UA') {
            result.Origin = getUkrainianName(ports, result.Origin)
            result.Destination = getUkrainianName(ports, result.Destination)
        }

        // language.value === 'uk-UA'

        const prompt = getPromptResponse(JSON.stringify(result), language.value);

        const gptResponse = await openai.chat.completions.create({
            model: text_model,
            messages: [{role: 'user', content: prompt}]
        });

        const replyGPT = gptResponse.choices[0].message.content.replace(/```json|```/g, '').trim();

        console.log(replyGPT)

        if (sessionState === 'awaiting_gpt_audio') {
            await createAudio(bot, replyGPT, chatId, language);
            return await sendInfo(bot, chatId, sessionMap);
        } else {
            if (processingMsg) {
                await bot.editMessageText(replyGPT, {
                    chat_id: chatId,
                    message_id: processingMsg.message_id,
                    parse_mode: 'Markdown'
                })
            } else await bot.sendMessage(chatId, replyGPT, {parse_mode: 'Markdown'})
            return await sendInfo(bot, chatId, sessionMap);
        }


        // await createAudio(bot, replyGPT, chatId);
    }

    if (resultPrice.status === 'NOT OK') {
        await bot.sendMessage(chatId, '–ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—Ä–æ—Ä–∞—Ö—É–Ω–∫–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!',);
    } else {


    }
}


async function createAudio(bot, text, chatId, language) {
    try {

        const API_KEY = 'AIzaSyDYsyq_eRkG3ghAdaZ4IiWlBHvNpvReTA8';
        const url = `https://texttospeech.googleapis.com/v1beta1/text:synthesize?key=${API_KEY}`;

        const isSupportedLanguage = supportedLanguages.includes(language.value);

        const voice = isSupportedLanguage
            ? {
                languageCode: language.value,
                name: `${language.value}-Chirp3-HD-Enceladus`
            }
            : {
                languageCode: "en-US",
                name: "en-US-Chirp3-HD-Enceladus"
            };

        const data = {
            audioConfig: {
                audioEncoding: "LINEAR16",
                effectsProfileId: ["small-bluetooth-speaker-class-device"],
                pitch: 0,
                speakingRate: 1
            },
            input: {
                text: cleanText(text)
            },
            voice
        };

        const response = await post(url, data);
        const audioContent = response.data.audioContent;

        if (!audioContent) throw new Error("–ù–µ–º–∞—î –∞—É–¥—ñ–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.");

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        const fileName = `voice_${uuidv4()}.wav`;
        const filePath = `./${fileName}`;
        fs.writeFileSync(filePath, Buffer.from(audioContent, 'base64'));

        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ —è–∫ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await bot.sendVoice(chatId, fs.createReadStream(filePath));

        // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –ø—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
        fs.unlinkSync(filePath);
        console.log('–ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —ñ —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ.');

        // const speechResponse = await openai.audio.speech.create({
        //     model: 'tts-1',
        //     voice: 'shimmer', // —ñ–Ω—à—ñ –≥–æ–ª–æ—Å–∏: alloy, echo, fable, onyx, shimmer
        //     input: text,
        // });
        //
        // const buffer = Buffer.from(await speechResponse.arrayBuffer());
        // const filePath = `./voice_${chatId}.mp3`;
        // fs.writeFileSync(filePath, buffer);
        //
        // await bot.sendVoice(chatId, fs.createReadStream(filePath));
        //
        // fs.unlinkSync(filePath);
    } catch (e) {
        await bot.sendMessage(chatId, '–ü—Ä–æ–±–ª–µ–º–∞ –∑ –ø—Ä–æ—Ä–∞—Ö—É–Ω–∫–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!',);
        console.log(e)
    }
}


function cleanText(text) {
    let cleaned = text.replace(/\*/g, '');

    cleaned = cleaned.replace(/([\u2700-\u27BF]|[\uE000-\uF8FF]|[\uD83C-\uDBFF\uDC00-\uDFFF])/g, '');

    return cleaned.trim();
}


async function sendInfo(bot, chatId, sessionMap) {
    sessionMap.set(chatId, 'awaiting_data1c')

    const validityDate = getValidityPeriod();
    const attentionInfo = `–°—Ç–≤–æ—Ä–∏—Ç–∏ OFFER? (—Ü—ñ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞ –¥–æ ${validityDate})`;

    return bot.sendMessage(chatId, attentionInfo, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [
                    {text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: 'data1c_confirm'},
                    {text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'data1c_cancel'}
                ],
                [
                    {text: '–û–±–æ–≤`—è–∑–∫–æ–≤–æ –¥–ª—è –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è', callback_data: 'data1c_info'},
                ],
            ],
        },
    });
}

const getUkrainianName = (array, englishName) => {
    const found = array.find(item => item.value.toUpperCase() === englishName.toUpperCase());
    return found ? found.text : englishName;
};



module.exports = {
    getPrompt,
    handleAudio,
    handleText,
    handlePhoto,
    handleCorrection,
    formatShippingInfo,
    formatShippingResult,
    data1CHandler
};
