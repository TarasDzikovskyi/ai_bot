const { showItemsPage } = require('../utils/pagination');
const { isLikelyOrder } = require('../utils/utils');
const { handleAudio, handleText, handleCorrection } = require('../services/openai.service');

/**
 * Sets up the message handler for the bot
 * @param {Object} bot - The Telegram bot instance
 * @param {Map} userState - The user state map
 * @param {Map} dialogStates - The dialog states map
 * @param {Map} sessionMap - The session map
 */
function setupMessageHandler(bot, userState, dialogStates, sessionMap) {
    bot.on('message', async (msg) => {
        const chatId = msg.chat.id;
        const state = dialogStates.get(chatId);
        const sessionState = sessionMap.get(chatId);
        const user = userState.get(chatId);

        if (user?.isEditing) {
            if (msg.text || msg.voice || msg.audio) {
                await handleCorrection(bot, msg, chatId, user, userState);
                // Don't delete userState here as it's needed for the confirmation step
                return;
            } else {
                await bot.sendMessage(chatId, '–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –∞—É–¥—ñ–æ –∑ —É—Ç–æ—á–Ω–µ–Ω–Ω—è–º.');
                return;
            }
        }

        console.log(msg);

        try {
            if (sessionState === 'awaiting_gpt_input') {
                sessionMap.delete(chatId);

                if (isLikelyOrder(msg.text)) {
                    await handleText(bot, msg.text, chatId);
                } else {
                    await bot.sendMessage(chatId, '–¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –∑–∞–ø–∏—Ç —â–æ–¥–æ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –≤–∞–Ω—Ç–∞–∂—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –¥–æ—Å—Ç–∞–≤–∫–∏.');
                }
            }

            if (sessionState === 'awaiting_gpt_audio') {
                sessionMap.delete(chatId);
                if (msg.voice || msg.audio) {
                    await handleAudio(bot, msg, chatId, userState);
                }
                // else await bot.sendMessage(chatId, '–¶–µ –Ω–µ –∞—É–¥—ñ–æ!')
            }

            if (msg.text === 'üîä –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞—É–¥—ñ–æ') {
                sessionMap.set(chatId, 'awaiting_gpt_audio');
                await bot.sendMessage(chatId, '–ù–∞–¥—ñ—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.');
                return;
            }

            if (msg.text === 'üìù –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç') {
                sessionMap.set(chatId, 'awaiting_gpt_input');
                await bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞–Ω—Ç–∞–∂—É.');
                return;
            }

            if (msg.text === 'üì¶ –ü—Ä–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞–Ω—Ç–∞–∂') {
                dialogStates.set(chatId, { step: 'awaitingPort', portPage: 0 });
                return showItemsPage(bot, chatId, 0, 'departure', 'port');
            }

            if (state) {
                if (state?.step === 'awaitingCity') {
                    state.city = msg.text;
                    state.step = 'awaitingVolume';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –æ–± º—î–º (–º¬≥):');
                }

                // –°—Ü–µ–Ω–∞—Ä—ñ–π –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –æ–±'—î–º—É
                if (state?.step === 'awaitingVolume') {
                    if (isNaN(parseFloat(msg.text))) return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–º¬≥):');
                    state.volume = parseFloat(msg.text);
                    state.step = 'awaitingWeight';
                    return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É (–∫–≥):');
                }

                // –°—Ü–µ–Ω–∞—Ä—ñ–π –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤–∞–≥–∏
                if (state?.step === 'awaitingWeight') {
                    if (isNaN(parseFloat(msg.text))) return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –≤–∞–≥—É (–∫–≥):');
                    state.weight = parseFloat(msg.text);
                    state.step = 'awaitingConfirmation';

                    const summary = `*–î–µ—Ç–∞–ª—ñ –≤–∞–Ω—Ç–∞–∂—É:*
üö¢ *–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:* ${state.port}
üìç *–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:* ${state.city}
‚öñÔ∏è *–í–∞–≥–∞:* ${state.weight} –∫–≥
üìê *–û–± º—î–º:* ${state.volume} –º¬≥

–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?`;

                    return bot.sendMessage(chatId, summary, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: 'confirm' },
                                    { text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel' }
                                ],
                            ],
                        },
                    });
                }
            }

            if (msg.text === '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞') {
                await bot.sendMessage(chatId, '–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞ –±–æ—Ç –æ–±—Ä–æ–±–∏—Ç—å –≤–∞—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —ñ –ø—Ä–æ—Ä–∞—Ö—É—î —Å—É–º—É –¥–æ—Å—Ç–∞–≤–∫–∏. –Ø–∫—â–æ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ –Ω–µ —Ç–æ—á–Ω—ñ ‚Äî —Ç–∏ –∑–º–æ–∂–µ—à —ó—Ö —É—Ç–æ—á–Ω–∏—Ç–∏.');
                return;
            }

            if (msg.text === 'üèôÔ∏è –°–ø–∏—Å–æ–∫ –º—ñ—Å—Ç') {
                return showItemsPage(bot, chatId, 0, 'list', 'city');
            }

            if (msg.text === 'üö¢ –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç—ñ–≤') {
                return showItemsPage(bot, chatId, 0, 'list', 'port');
            }
        } catch (error) {
            console.error('‚ùå Error:', error);
            bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.');
        }
    });
}

module.exports = {
    setupMessageHandler
};
