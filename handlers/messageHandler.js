const {showItemsPage} = require('../utils/pagination');
const {isLikelyOrder} = require('../utils/utils');
const {handleAudio, handleText, handleCorrection} = require('../services/openai.service');
const {ports, cities, allowedTextCommands} = require('../constants')
const JSONdb = require('simple-json-db');

const {connectTo1C} = require('../services/data1C.service')

let option = {
    "parse_mode": "Markdown",
    "reply_markup": {
        "one_time_keyboard": true,
        "keyboard": [[{
            text: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
            request_contact: true
        }], ["–°–∫–∞—Å—É–≤–∞—Ç–∏"]]
    }
};

const normalizePort = (str) => str.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
const normalizeCity = (str) => str.normalize("NFC").toLowerCase().replace(/[^\p{L}\d\s]/gu, '').toLowerCase();

async function setupMessageHandler(bot, userState, dialogStates, sessionMap, data1CMap) {
    bot.on('inline_query', (query) => {
        const userId = query.from.id;
        const userState = dialogStates.get(userId);

        const rawQuery = query.query.trim();
        const searchText = rawQuery.toLowerCase();

        let showConfirmButton = false;
        if (userState && (userState.step === 'awaitingPort' || userState.step === 'choosingDestination')) {
            showConfirmButton = true;
        }

        let results = [];

        if (searchText.startsWith('port ')) {
            const keyword = normalizePort(searchText.replace('port ', '').trim());

            results = ports
                .filter(item =>
                    normalizePort(item.text).includes(keyword) ||
                    item.value.toLowerCase().includes(keyword)
                )
                .slice(0, 20)
                .map((item, index) => {
                    const baseResult = {
                        type: 'article',
                        id: `port-${index}`,
                        title: `–ü–æ—Ä—Ç: ${item.text} (${item.value})`,
                        input_message_content: {
                            message_text: `–û–±—Ä–∞–Ω–æ –ø–æ—Ä—Ç: ${item.text} (${item.value})`
                        },
                        description: `–ö–æ–¥: ${item.code}`
                    };

                    if (showConfirmButton) {
                        baseResult.reply_markup = {
                            inline_keyboard: [[
                                {
                                    text: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏?',
                                    callback_data: `port:${item.value}`
                                }
                            ]]
                        };
                    }

                    return baseResult;
                });

        } else if (searchText.startsWith('city ')) {
            const keyword = normalizeCity(searchText.replace('city ', '').trim());

            results = cities
                .filter(item =>
                    normalizeCity(item.text).includes(keyword) ||
                    item.value.toLowerCase().includes(keyword)
                )
                .slice(0, 20)
                .map((item, index) => {
                    const baseResult = {
                        type: 'article',
                        id: `city-${index}`,
                        title: `–ú—ñ—Å—Ç–æ: ${item.text} (${item.value})`,
                        input_message_content: {
                            message_text: `–û–±—Ä–∞–Ω–æ –º—ñ—Å—Ç–æ: ${item.text} (${item.value})`
                        }
                        // description –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏, —è–∫—â–æ —Ç—Ä–µ–±–∞
                    };

                    if (showConfirmButton) {
                        baseResult.reply_markup = {
                            inline_keyboard: [[
                                {
                                    text: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏?',
                                    callback_data: `city:${item.value}`
                                }
                            ]]
                        };
                    }

                    return baseResult;
                });
        } else {
            // –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –ø–æ—Ä—Ç/–º—ñ—Å—Ç–æ
            results = [{
                type: 'article',
                id: 'empty',
                title: '–í–∫–∞–∂–∏ "port" –∞–±–æ "city" (—è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ)',
                input_message_content: {
                    message_text: '–ù–∞–ø–∏—à–∏ `port –û–¥–µ—Å–∞` –∞–±–æ `city –ö–∏—ó–≤`'
                },
                description: '–©–æ–± –∑–Ω–∞–π—Ç–∏ –ø–æ—Ä—Ç –∞–±–æ –º—ñ—Å—Ç–æ ‚Äî –≤–≤–µ–¥–∏ "port ..." –∞–±–æ "city ..."'
            }];
        }

        bot.answerInlineQuery(query.id, results);
    });

    bot.on('message', async (msg) => {
        const chatId = msg.chat.id;
        const state = dialogStates.get(chatId);
        const sessionState = sessionMap.get(chatId);
        const user = userState.get(chatId);
        const contact = msg.contact;

        console.log(msg.text)
        console.log(chatId)

        const db = new JSONdb('people.json');
        const db_user = db.get(chatId);
        // console.log(db_user)

        if (contact) {
            if (!contact.phone_number.includes('+')) contact.phone_number = `+${contact.phone_number}`;

            const db_person = db.get(contact.user_id);

            // console.log(db_person)

            if (!db_person) {
                let person = {};
                person['id'] = contact.user_id;
                person['name'] = `${contact.first_name} ${contact.last_name}`;
                person['phone_number'] = contact.phone_number;

                await bot.sendMessage(chatId, '–î—è–∫—É—î–º–æ! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.')

                const aiData = {
                    "type":"LCL_SetUser",
                    "user": person
                }

                // return
                return await connectTo1C(aiData);
            }
        }


        try {
            if (msg.text === '/start') {
                if (!db_user) {
                    return bot.sendMessage(chatId, `–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Å–æ–±–∏`, option)
                } else {
                    return bot.sendMessage(chatId, '–ü—Ä–∏–≤—ñ—Ç, —è AI —Å–µ–π–ª–∑ü§ñ Boxline Ukraine. –ë—É–¥—É —Ä–∞–¥–∏–π –Ω–∞–¥–∞—Ç–∏ –Ω–∞–π–∫—Ä–∞—â—É —Ü—ñ–Ω—É –∑–≥—ñ–¥–Ω–æ –í–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—ÉüòÉ. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Çüìù –∞–±–æ –∞—É–¥—ñ–æüé§ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –¥–æ–≤—ñ–ª—å–Ω—ñ–π —Ñ–æ—Ä–º—ñ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤–∞–Ω—Ç–∞–∂—É –¥–ª—è –ø—Ä–æ—Ä–∞—Ö—É–Ω–∫—Éüö¢. –í–∫–∞–∂—ñ—Ç—å –æ–±–æ–≤`—è–∑–∫–æ–≤–æ –∑–≤—ñ–¥–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞‚öìÔ∏è —ñ –∫—É–¥–∏ –¥–æ—Å—Ç–∞–≤–∫–∞üöö –≤–∞–≥–∞ –æ–±`—î–º, —Ç–∞—Ä–∏—Ñ –¥–∞—î—Ç—å—Å—è –∑–∞–≤–∂–¥–∏ –Ω–∞ —É–º–æ–≤–∞—Ö —Ñ–æ–±.', {
                        reply_markup: {
                            keyboard: [
                                // ['üîä –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞—É–¥—ñ–æ', 'üìù –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç'],
                                ['üì¶ –ü—Ä–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞–Ω—Ç–∞–∂', '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞'],
                                ['üèôÔ∏è –°–ø–∏—Å–æ–∫ –º—ñ—Å—Ç', 'üö¢ –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç—ñ–≤']
                            ],
                            resize_keyboard: true,
                            one_time_keyboard: false
                        }
                    });
                }
            }

            if (msg.text === '/search') {
                if (!db_user) {
                    return bot.sendMessage(chatId, `–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Å–æ–±–∏`, option)
                } else {
                    return bot.sendMessage(chatId, '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ—à—É–∫—É:', {
                        reply_markup: {
                            inline_keyboard: [[
                                {
                                    text: 'üîç –ü–æ—à—É–∫ –ø–æ—Ä—Ç—É',
                                    switch_inline_query_current_chat: 'port '
                                },
                                {
                                    text: 'üîç –ü–æ—à—É–∫ –º—ñ—Å—Ç–∞',
                                    switch_inline_query_current_chat: 'city '
                                }
                            ]]
                        }
                    });
                }
            }


            if (db_user) {
                console.log(user)
                if(sessionState !== 'correction' && !state && !allowedTextCommands.includes(msg.text) && !msg.voice && !msg.audio){

                    // if (isLikelyOrder(msg.text)) {
                        sessionMap.set(chatId, 'awaiting_gpt_input');
                        await handleText(bot, msg.text, chatId, sessionMap, data1CMap);
                    // } else {
                    //     await bot.sendMessage(chatId, '–¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –∑–∞–ø–∏—Ç —â–æ–¥–æ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –≤–∞–Ω—Ç–∞–∂—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –¥–æ—Å—Ç–∞–≤–∫–∏.');
                    // }
                }

                if (sessionState !== 'correction' && (msg.voice || msg.audio)) {
                    sessionMap.set(chatId, 'awaiting_gpt_audio');
                    await handleAudio(bot, msg, chatId, userState, sessionMap, data1CMap);
                }

                console.log('=======================================USER===========================================')
                console.log(user)
                console.log('=======================================USER===========================================')


                if (user.isEditing) {
                    if (msg.text || msg.voice || msg.audio) {
                        await handleCorrection(bot, msg, chatId, user, userState, sessionState);
                        // Don't delete userState here as it's needed for the confirmation step
                        return;
                    } else {
                        await bot.sendMessage(chatId, '–ù–∞–¥—ñ—à–ª—ñ–ª—å —Ç–µ–∫—Å—Ç –∞–±–æ –∞—É–¥—ñ–æ –∑ —É—Ç–æ—á–Ω–µ–Ω–Ω—è–º.');
                        return;
                    }


                }

                // if (sessionState === 'awaiting_gpt_input') {
                //     sessionMap.delete(chatId);
                //
                //     if (isLikelyOrder(msg.text)) {
                //         await handleText(bot, msg.text, chatId);
                //     } else {
                //         await bot.sendMessage(chatId, '–¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –∑–∞–ø–∏—Ç —â–æ–¥–æ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –≤–∞–Ω—Ç–∞–∂—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –¥–æ—Å—Ç–∞–≤–∫–∏.');
                //     }
                // }

                // if (sessionState === 'awaiting_gpt_audio') {
                //     sessionMap.delete(chatId);
                //     if (msg.voice || msg.audio) {
                //         await handleAudio(bot, msg, chatId, userState);
                //     }
                //     // else await bot.sendMessage(chatId, '–¶–µ –Ω–µ –∞—É–¥—ñ–æ!')
                // }

                // if (msg.text === 'üîä –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞—É–¥—ñ–æ') {
                //     sessionMap.set(chatId, 'awaiting_gpt_audio');
                //     await bot.sendMessage(chatId, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.');
                //     return;
                // }

                // if (msg.text === 'üìù –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç') {
                //     sessionMap.set(chatId, 'awaiting_gpt_input');
                //     await bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞–Ω—Ç–∞–∂—É.');
                //     return;
                // }

                if (msg.text === 'üì¶ –ü—Ä–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞–Ω—Ç–∞–∂') {
                    dialogStates.set(chatId, {step: 'awaitingPort', portPage: 0});
                    await showItemsPage(bot, chatId, 0, 'departure', 'port');

                    return bot.sendMessage(chatId, '–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ—à—É–∫—É:', {
                        reply_markup: {
                            inline_keyboard: [[
                                {
                                    text: 'üîç –ü–æ—à—É–∫ –ø–æ—Ä—Ç—É',
                                    switch_inline_query_current_chat: 'port '
                                }
                            ]]
                        }
                    });
                }

                if (state) {
                    if (state?.step === 'awaitingCity') {
                        state.city = msg.text;
                        state.step = 'awaitingVolume';
                        return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –æ–± º—î–º (–º¬≥):');
                    }

                    // –°—Ü–µ–Ω–∞—Ä—ñ–π –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –æ–±'—î–º—É
                    if (state?.step === 'awaitingVolume') {
                        if (isNaN(parseFloat(msg.text))) return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–º¬≥):');
                        state.volume = parseFloat(msg.text);
                        state.step = 'awaitingWeight';
                        return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É (–∫–≥):');
                    }

                    // –°—Ü–µ–Ω–∞—Ä—ñ–π –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤–∞–≥–∏
                    if (state?.step === 'awaitingWeight') {
                        if (isNaN(parseFloat(msg.text))) return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –≤–∞–≥—É (–∫–≥):');
                        state.weight = parseFloat(msg.text);
                        state.step = 'awaitingConfirmation';

                        const summary = `*–î–µ—Ç–∞–ª—ñ –≤–∞–Ω—Ç–∞–∂—É:*
üö¢ *–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:* ${state.port}
üìç *–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:* ${state.city}
‚öñÔ∏è *–í–∞–≥–∞:* ${state.weight} –∫–≥
üìê *–û–± º—î–º:* ${state.volume} –º¬≥

–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?`;

                        return bot.sendMessage(chatId, summary, {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                inline_keyboard: [
                                    [
                                        {text: '‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏', callback_data: 'confirm'},
                                        {text: '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data: 'cancel'}
                                    ],
                                ],
                            },
                        });
                    }
                }

                if (msg.text === '‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞') {
                    await bot.sendMessage(chatId, '–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞ –±–æ—Ç –æ–±—Ä–æ–±–∏—Ç—å –≤–∞—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —ñ –ø—Ä–æ—Ä–∞—Ö—É—î —Å—É–º—É –¥–æ—Å—Ç–∞–≤–∫–∏. –Ø–∫—â–æ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ –Ω–µ —Ç–æ—á–Ω—ñ ‚Äî —Ç–∏ –∑–º–æ–∂–µ—à —ó—Ö —É—Ç–æ—á–Ω–∏—Ç–∏.');
                    return;
                }

                if (msg.text === 'üèôÔ∏è –°–ø–∏—Å–æ–∫ –º—ñ—Å—Ç') {
                    await showItemsPage(bot, chatId, 0, 'list', 'city');

                    return bot.sendMessage(chatId, '–ê–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ—à—É–∫—É:', {
                        reply_markup: {
                            inline_keyboard: [[
                                {
                                    text: 'üîç –ü–æ—à—É–∫ –º—ñ—Å—Ç–∞',
                                    switch_inline_query_current_chat: 'city '
                                }
                            ]]
                        }
                    });
                }

                if (msg.text === 'üö¢ –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç—ñ–≤') {
                    await showItemsPage(bot, chatId, 0, 'list', 'port');

                    return bot.sendMessage(chatId, '–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ—à—É–∫—É:', {
                        reply_markup: {
                            inline_keyboard: [[
                                {
                                    text: 'üîç –ü–æ—à—É–∫ –ø–æ—Ä—Ç—É',
                                    switch_inline_query_current_chat: 'port '
                                }
                            ]]
                        }
                    });
                }
            }
        } catch (error) {
            console.error('‚ùå Error:', error);
            bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.');
        }
    });
}

module.exports = {
    setupMessageHandler
};


