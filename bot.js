require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { OpenAI } = require('openai');
const fs = require('fs');
const path = require('path');
const axios = require('axios');


const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;

    console.log(msg);
    
    try {
        if (msg.voice || msg.audio) {
            await handleAudio(msg, chatId);
        } else if (msg.text) {
            await handleText(msg.text, chatId);
        // } else if (msg.photo) {
        //     await handlePhoto(msg, chatId);
        } else {
            bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç, –∞—É–¥—ñ–æ –∞–±–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.');
        }
    } catch (error) {
        console.error('‚ùå Error:', error);
        bot.sendMessage(chatId, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.');
    }
});

// üéôÔ∏è –û–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ –∞–±–æ voice
async function handleAudio(msg, chatId) {
    const fileId = msg.voice?.file_id || msg.audio?.file_id;

    const file = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    const processingMsg = await bot.sendMessage(chatId, 'üéß –û–±—Ä–æ–±–ª—è—é –∞—É–¥—ñ–æ...');

    try {
        const localFilePath = await downloadFile(fileUrl, `audio_${Date.now()}.oga`);

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Whisper –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
        const transcription = await openai.audio.transcriptions.create({
            file: fs.createReadStream(localFilePath),
            model: "whisper-1",
            language: "uk"
        });

        if (!transcription.text) {
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑ –∞—É–¥—ñ–æ');
        }

        console.log(transcription);
        
        const text = transcription.text;

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ GPT –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ —Ç–µ–∫—Å—Ç—É
 
        const prompt = getPrompt(text);


        const gptResponse = await openai.chat.completions.create({
            model: 'gpt-3.5-turbo',
            messages: [{ role: 'user', content: prompt }]
        });

        // console.log(gptResponse);
        

        const reply = gptResponse.choices[0].message.content;

        console.log(reply)

        if(!reply.from.confidence || !reply.to.confidence || !reply.weight.confidence || !reply.volume.confidence) {
            await bot.sendMessage(chatId, '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ –∑ –∞—É–¥—ñ–æ.');

        }

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
        await bot.editMessageText(reply, {
            chat_id: chatId,
            message_id: processingMsg.message_id
        });
    } catch (error) {
        console.error('‚ùå Error in audio processing:', error);
        await bot.editMessageText('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞—É–¥—ñ–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.', {
            chat_id: chatId,
            message_id: processingMsg.message_id
        });
    }
}

// üí¨ –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É
async function handleText(text, chatId) {
    const prompt = getPrompt(text);

    const gptResponse = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: prompt }]
    });

    const reply = gptResponse.choices[0].message.content;
    await bot.sendMessage(chatId, reply);
}

// üñºÔ∏è –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
async function handlePhoto(msg, chatId) {
    const fileId = msg.photo[msg.photo.length - 1].file_id; // –ù–∞–π–±—ñ–ª—å—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const file = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    const processingMsg = await bot.sendMessage(chatId, 'üß† –ê–Ω–∞–ª—ñ–∑—É—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...');

    const visionResponse = await openai.chat.completions.create({
        model: "gpt-4-vision-preview",
        messages: [
            {
                role: "user",
                content: [
                    { type: "text", content: "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ –≤–∏—Ç—è–≥–Ω–∏ –¥–∞–Ω—ñ –∑ –Ω—å–æ–≥–æ." },
                    { type: "image_url", image_url: { url: fileUrl } }
                ]
            }
        ]
    });

    const reply = visionResponse.choices[0].message.content;
    await bot.editMessageText(reply, {
        chat_id: chatId,
        message_id: processingMsg.message_id
    });
}

console.log('ü§ñ Bot is running...');


function getPrompt(text) {

    const prompt = `
–¢–∏ ‚Äî –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —É–≤–∞–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –≤–∞–Ω—Ç–∞–∂—É —Ç–∞ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –∑ –Ω—å–æ–≥–æ –∫–ª—é—á–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞—Ä—à—Ä—É—Ç —ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞–Ω—Ç–∞–∂—É.

üîç –ù–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–µ:
- –û–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä, —á–∏ –≤–∫–∞–∑–∞–Ω–∏–π –ø–æ—Ä—Ç —É –ø–æ–ª—ñ "from" —î —Ä–µ–∞–ª—å–Ω–∏–º, –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ –≤–∏–∑–Ω–∞–Ω–∏–º –ø–æ—Ä—Ç–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —á–µ—Ä–µ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø–æ—Ä—Ç—ñ–≤).
- –Ø–∫—â–æ —Ç–∞–∫–æ–≥–æ –ø–æ—Ä—Ç—É **–Ω–µ —ñ—Å–Ω—É—î**, –∞–±–æ –Ω–∞–∑–≤–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∞–±–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π —Å–∞–º–µ –ø–æ—Ä—Ç (–∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º—ñ—Å—Ç–æ) ‚Äî –ø–æ–≤–µ—Ä–Ω–∏ **null**: 'null'. –¶–µ –æ–±–æ–≤ º—è–∑–∫–æ–≤–∞ —É–º–æ–≤–∞.
- –¢–∞–∫ —Å–∞–º–æ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä, —á–∏ –≤–∫–∞–∑–∞–Ω–µ –º—ñ—Å—Ü–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤ –ø–æ–ª—ñ "to" (–º—ñ—Å—Ç–æ –∞–±–æ –∫—Ä–∞—ó–Ω–∞) **–¥—ñ–π—Å–Ω–æ —ñ—Å–Ω—É—î**. –Ø–∫—â–æ –≤–æ–Ω–æ –Ω–µ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É—î—Ç—å—Å—è ‚Äî —Ç–∞–∫–æ–∂ –ø–æ–≤–µ—Ä–Ω–∏ **null** 'null'.

üì¶ –ù–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –ø–æ–≤–µ—Ä–Ω–∏ **—Ç—ñ–ª—å–∫–∏** –≤–∞–ª—ñ–¥–Ω–∏–π JSON –∑ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é:

{
  "from": {
    "value": "–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∞ –Ω–∞–∑–≤–∞ –ø–æ—Ä—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é, –ª–∏—à–µ –ø–æ—Ä—Ç)",
    "confidence": true | false
  },
  "to": {
    "value": "–ú—ñ—Å—Ü–µ —Ä–æ–∑–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–±–æ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é)",
    "confidence": true | false
  },
  "weight": {
    "value": "–í–∞–≥–∞ –≤–∞–Ω—Ç–∞–∂—É —É –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ –∞–±–æ null)",
    "confidence": true | false
  },
  "volume": {
    "value": "–û–± º—î–º –≤–∞–Ω—Ç–∞–∂—É —É –∫—É–±—ñ—á–Ω–∏—Ö –º–µ—Ç—Ä–∞—Ö (—Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ –∞–±–æ null)",
    "confidence": true | false
  }
}

üìå –î–æ–¥–∞—Ç–∫–æ–≤—ñ —É–º–æ–≤–∏:
- –Ø–∫—â–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –∑–≥–∞–¥—É—î—Ç—å—Å—è –∞–±–æ –Ω–µ—á—ñ—Ç–∫–∞ ‚Äî –≤–∫–∞–∂–∏ "value": null —ñ "confidence": false.
- –Ø–∫—â–æ –æ–¥–∏–Ω–∏—Ü—ñ —ñ–Ω—à—ñ (—Ç–æ–Ω–Ω–∏, –ª—ñ—Ç—Ä–∏, —Ñ—É—Ç¬≥ —Ç–æ—â–æ) ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç—É–π —É –∫–≥ –∞–±–æ –º¬≥.
- –ü–æ–∑–Ω–∞—á–∞–π "confidence": true —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–ø–µ–≤–Ω–µ–Ω–∏–π –Ω–∞ 100%.
- **–ù—ñ–∫–æ–ª–∏** –Ω–µ –¥–æ–¥–∞–≤–∞–π –∂–æ–¥–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å ‚Äî –ª–∏—à–µ JSON –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–±'—î–∫—Ç.
- –Ø–∫—â–æ –ø–æ—Ä—Ç "from" –∞–±–æ –º—ñ—Å—Ü–µ "to" –Ω–µ –≤–∞–ª—ñ–¥–Ω–µ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î ‚Äî **–≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏** 'null'.

–û—Å—å —Ç–µ–∫—Å—Ç:
"""${text}"""
`;


    return prompt;
}

async function downloadFile(url, filename) {

    const directoryPath = path.join(__dirname, 'audio');

    await fs.promises.mkdir(directoryPath, { recursive: true });

    const filePath = path.join(directoryPath, filename);

    const writer = fs.createWriteStream(filePath);

    const response = await axios.get(url, { responseType: 'stream' });
    response.data.pipe(writer);

    return new Promise((resolve, reject) => {
        writer.on('finish', () => resolve(filePath));
        writer.on('error', reject);
    });
}


function createResponseText() {
    const text = `–í–∞—à—ñ –¥–∞–Ω—ñ:
    –ü–æ—Ä—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: 
    –ú—ñ—Å—Ü–µ –¥–æ—Å—Ç–∞–≤–∫–∏:
    –í–∞–≥–∞ –≤–∞–Ω—Ç–∞–∂—É:
    –û–± º—î–º –≤–∞–Ω—Ç–∞–∂—É:
    
    –ù–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö –±—É–ª–æ –ø—Ä–æ—Ä–∞—Ö–æ–≤–∞–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω–µ: 
    –¶—ñ–Ω–∞ –¥–æ –º—ñ—Å—Ü—è –¥–æ—Å—Ç–∞–≤–∫–∏:
    –¶—ñ–Ω–∞ –¥–æ –¥–≤–µ—Ä–µ–π: `

    return text
}